namespace Windows.Security.AntiMalwareScan
{
    using System;
    using System.Runtime.InteropServices;
    using Interop;

    /// <summary>
    ///     Represents an Anti-Malware Scan Interface (AMSI) context.
    ///     The <see cref="AmsiContext" /> class provides methods to initialize AMSI, scan strings and buffers, and dispose of
    ///     AMSI resources properly.
    /// </summary>
    public sealed class AmsiContext : IDisposable
    {
        private AmsiContext(IntPtr amsiContext)
        {
            this.Handle = amsiContext;
        }

        /// <summary>
        ///     Gets the handle to the Anti-Malware Scan Interface (AMSI) context.
        ///     This handle is used internally to interact with the AMSI APIs, manage sessions, and perform scan operations.
        /// </summary>
        internal IntPtr Handle { get; }

        /// <summary>
        ///     Releases all resources used by the AmsiContext instance.
        /// </summary>
        /// <remarks>
        ///     After calling Dispose, the AmsiContext instance should not be used
        ///     and any further operations will result in an exception.
        /// </remarks>
        public void Dispose()
        {
            Amsi.AmsiUninitialize(this.Handle);
        }

        /// <summary>
        ///     Creates an instance of the AmsiContext class with the specified application name.
        /// </summary>
        /// <param name="appName">The name of the application requesting Anti-Malware Scan Interface (AMSI) services.</param>
        /// <returns>A new instance of the AmsiContext class.</returns>
        /// <exception cref="ArgumentException">Thrown when the application name is invalid.</exception>
        /// <exception cref="AmsiException">Thrown when an error occurs during initialization.</exception>
        public static AmsiContext Create(string appName)
        {
            uint hr = Amsi.AmsiInitialize(appName, out IntPtr amsiContext);

            return hr switch
            {
                CommonHResult.S_OK => new AmsiContext(amsiContext),
                CommonHResult.E_INVALIDARG => throw new ArgumentException(),
                _ => throw new AmsiException(hr)
            };
        }

        /// <summary>
        ///     Scans the specified string.
        /// </summary>
        /// <param name="s">The string to be scanned for malware threats.</param>
        /// <param name="contentName">The name of the content being scanned, typically used for identification purposes.</param>
        /// <returns>An AmsiScanResult indicating whether the content is clean or should be blocked.</returns>
        /// <exception cref="ArgumentNullException">Thrown when either the string or the content name is null.</exception>
        /// <exception cref="AmsiException">Thrown when an error occurs during the scan.</exception>
        public AmsiScanResult Scan(string s, string contentName)
        {
            return this.Scan(s, contentName, null);
        }

        /// <summary>
        ///     Scans the specified buffer for potential malware.
        /// </summary>
        /// <param name="buffer">The buffer containing the data to be scanned.</param>
        /// <param name="contentName">The name associated with the content being scanned.</param>
        /// <returns>An <see cref="AmsiScanResult" /> indicating whether the content is clean or should be blocked.</returns>
        /// <exception cref="ArgumentNullException">Thrown when the buffer or contentName is null.</exception>
        /// <exception cref="AmsiException">Thrown when an error occurs during the scanning process.</exception>
        public AmsiScanResult Scan(byte[] buffer, string contentName)
        {
            return this.ScanBuffer(buffer, contentName, null);
        }

        /// <summary>
        ///     Scans the specified string content for malware.
        /// </summary>
        /// <param name="s">The string content to be scanned.</param>
        /// <param name="contentName">A name associated with the content being scanned, used for identification purposes.</param>
        /// <param name="session">An optional AmsiSession object that can be used for grouping related scans.</param>
        /// <returns>An AmsiScanResult indicating whether the content is clean or malware was detected.</returns>
        /// <exception cref="ArgumentNullException">Thrown when the provided string content or content name is null.</exception>
        internal AmsiScanResult Scan(string s, string contentName, AmsiSession session)
        {
            ArgumentNullException.ThrowIfNull(s);
            ArgumentNullException.ThrowIfNull(contentName);

            IntPtr sessionHandle = session?.Handle ?? IntPtr.Zero;
            uint hr = Amsi.AmsiScanString(this.Handle, s, contentName, sessionHandle, out AmsiResult result);
            return HandleScanResult(hr, result);
        }

        /// <summary>
        ///     Scans a buffer for malware.
        /// </summary>
        /// <param name="buffer">The buffer containing the data to be scanned.</param>
        /// <param name="contentName">The name describing the content being scanned.</param>
        /// <param name="session">The optional AMSI session associated with this scan.</param>
        /// <returns>An AmsiScanResult indicating if the content is clean or blocked.</returns>
        /// <exception cref="ArgumentNullException">Thrown when the buffer or content name is null.</exception>
        internal AmsiScanResult ScanBuffer(byte[] buffer, string contentName, AmsiSession session)
        {
            ArgumentNullException.ThrowIfNull(buffer);
            ArgumentNullException.ThrowIfNull(contentName);

            using var pBuffer = new HGlobal(buffer.Length);

            Marshal.Copy(buffer, 0, pBuffer.Ptr, buffer.Length);
            IntPtr sessionHandle = session?.Handle ?? IntPtr.Zero;
            uint hr = Amsi.AmsiScanBuffer(this.Handle, pBuffer.Ptr, pBuffer.Size, contentName, sessionHandle, out AmsiResult result);
            return HandleScanResult(hr, result);
        }

        /// <summary>
        ///     Handles the result of an AMSI scan operation.
        /// </summary>
        /// <param name="hr">The HRESULT returned from the AMSI scan function.</param>
        /// <param name="result">The AmsiResult value from the AMSI scan indicating the result of the scan.</param>
        /// <returns>An AmsiScanResult value indicating whether the content is clean or should be blocked.</returns>
        /// <exception cref="ArgumentException">Thrown when the HRESULT indicates an invalid argument.</exception>
        /// <exception cref="AmsiException">Thrown when an error occurs that is not handled by the function.</exception>
        private static AmsiScanResult HandleScanResult(uint hr, AmsiResult result)
        {
            switch (hr)
            {
                case CommonHResult.S_OK:
                {
                    bool isDefined = Kernel32.IsDefined(() => Amsi.AmsiResultIsMalware(result));
                    if (isDefined && Amsi.AmsiResultIsMalware(result).IsTrue())
                        return AmsiScanResult.Block;

                    return result switch
                    {
                        AmsiResult.Clean or AmsiResult.NotDetected => AmsiScanResult.Clean,
                        AmsiResult.Detected => AmsiScanResult.Block,
                        _ => AmsiScanResult.Block
                    };
                }

                case CommonHResult.E_INVALIDARG:
                    throw new ArgumentException("One or more arguments are not valid.");

                case AmsiHResult.E_WINDOWS_DEFENDER_SECURITY_CENTER_IS_OFF:
                    throw new NotSupportedException("Windows Defender Center is not supported or not available.");
                
                default:
                    throw new AmsiException(hr);
            }
        }
    }
}