namespace Windows.Security.AntiMalwareScan
{
    using System;
    using System.Runtime.InteropServices;
    using Interop;

    public sealed class AmsiContext : IDisposable
    {
        private readonly IntPtr handle;

        private AmsiContext(IntPtr amsiContext)
        {
            this.handle = amsiContext;
        }

        internal IntPtr Handle => this.handle;

        public void Dispose()
        {
            Amsi.AmsiUninitialize(this.Handle);
        }

        public static AmsiContext Create(string appName)
        {
            uint hr = Amsi.AmsiInitialize(appName, out IntPtr amsiContext);

            return hr switch
            {
                CommonHResult.S_OK => new AmsiContext(amsiContext),
                CommonHResult.E_INVALIDARG => throw new ArgumentException(),
                _ => throw new AmsiException(hr)
            };
        }

        public AmsiScanResult Scan(string s, string contentName)
        {
            return this.Scan(s, contentName, null);
        }

        public AmsiScanResult Scan(byte[] buffer, string contentName)
        {
            return this.ScanBuffer(buffer, contentName, null);
        }

        internal AmsiScanResult Scan(string s, string contentName, AmsiSession session)
        {
            ArgumentNullException.ThrowIfNull(s);
            ArgumentNullException.ThrowIfNull(contentName);

            IntPtr sessionHandle = session?.Handle ?? IntPtr.Zero;
            uint hr = Amsi.AmsiScanString(this.handle, s, contentName, sessionHandle, out AmsiResult result);
            return HandleScanResult(hr, result);
        }

        internal AmsiScanResult ScanBuffer(byte[] buffer, string contentName, AmsiSession session)
        {
            ArgumentNullException.ThrowIfNull(buffer);
            ArgumentNullException.ThrowIfNull(contentName);

            using var pBuffer = new HGlobal(buffer.Length);

            Marshal.Copy(buffer, 0, pBuffer.Ptr, buffer.Length);
            IntPtr sessionHandle = session?.Handle ?? IntPtr.Zero;
            uint hr = Amsi.AmsiScanBuffer(this.handle, pBuffer.Ptr, pBuffer.Size, contentName, sessionHandle, out AmsiResult result);
            return HandleScanResult(hr, result);
        }

        private static AmsiScanResult HandleScanResult(uint hr, AmsiResult result)
        {
            switch (hr)
            {
                case CommonHResult.S_OK:
                {
                    bool isDefined = Kernel32.IsDefined(() => Amsi.AmsiResultIsMalware(result));
                    if (isDefined && Amsi.AmsiResultIsMalware(result).IsTrue())
                        return AmsiScanResult.Block;

                    return result switch
                    {
                        AmsiResult.Clean or AmsiResult.NotDetected => AmsiScanResult.Clean,
                        AmsiResult.Detected => AmsiScanResult.Block,
                        _ => AmsiScanResult.Block
                    };
                }

                case CommonHResult.E_INVALIDARG:
                    throw new ArgumentException();

                default:
                    throw new AmsiException(hr);
            }
        }
    }
}