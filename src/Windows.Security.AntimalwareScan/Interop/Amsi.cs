namespace Windows.Security.AntiMalwareScan.Interop
{
    using System;
    using System.Runtime.InteropServices;

    internal static class Amsi
    {
        /// <summary>
        ///     Initialize the AMSI API.
        /// </summary>
        /// <param name="appName">The name, version, or GUID string of the app calling the AMSI API.</param>
        /// <param name="coInit">Ignored. This parameter may be removed from a future build of Windows 10.</param>
        /// <param name="amsiContext">A handle of type HAMSICONTEXT that must be passed to all subsequent calls to the AMSI API.</param>
        /// <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        [Obsolete, DllImport("Amsi.dll", EntryPoint = "AmsiInitialize", CharSet = CharSet.Unicode)]
        public static extern uint AmsiInitialize(
            [MarshalAs(UnmanagedType.LPWStr)] string appName,
            uint coInit,
            out IntPtr amsiContext);

        /// <summary>
        ///     Initialize the AMSI API.
        /// </summary>
        /// <param name="appName">The name, version, or GUID string of the app calling the AMSI API.</param>
        /// <param name="amsiContext">A handle of type HAMSICONTEXT that must be passed to all subsequent calls to the AMSI API.</param>
        /// <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        [DllImport("Amsi.dll", EntryPoint = "AmsiInitialize", CharSet = CharSet.Unicode)]
        public static extern uint AmsiInitialize(
            [MarshalAs(UnmanagedType.LPWStr)] string appName,
            out IntPtr amsiContext);


        /// <summary>
        ///     Remove the instance of the AMSI API that was originally opened by AmsiInitialize.
        /// </summary>
        /// <param name="amsiContext">The handle of type HAMSICONTEXT that was initially received from AmsiInitialize.</param>
        [DllImport("Amsi.dll", EntryPoint = "AmsiUninitialize")]
        public static extern void AmsiUninitialize(IntPtr amsiContext);

        /// <summary>
        ///     Opens a session within which multiple scan requests can be correlated.
        /// </summary>
        /// <param name="amsiContext">The handle of type HAMSICONTEXT that was initially received from AmsiInitialize.</param>
        /// <param name="session">
        ///     A handle of type HAMSISESSION that must be passed to all subsequent calls to the AMSI API within
        ///     the session.
        /// </param>
        /// <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        [DllImport("Amsi.dll", EntryPoint = "AmsiOpenSession")]
        public static extern uint AmsiOpenSession(
            IntPtr amsiContext,
            out IntPtr session);

        /// <summary>
        ///     Close a session that was opened by AmsiOpenSession.
        /// </summary>
        /// <param name="amsiContext">The handle of type HAMSICONTEXT that was initially received from AmsiInitialize.</param>
        /// <param name="session">The handle of type HAMSISESSION that was initially received from AmsiOpenSession.</param>
        [DllImport("Amsi.dll", EntryPoint = "AmsiCloseSession")]
        public static extern void AmsiCloseSession(
            IntPtr amsiContext,
            IntPtr session);

        /// <summary>
        ///     Determines if the result of a scan indicates that the content should be blocked.
        /// </summary>
        /// <param name="r">The AMSI_RESULT returned by AmsiScanBuffer or AmsiScanString.</param>
        /// <returns>Returns true if the scanned content contains malware and should be blocked. Otherwise, false.</returns>
        [DllImport("Amsi.dll", EntryPoint = "AmsiResultIsMalware")]
        public static extern int AmsiResultIsMalware(AmsiResult r);

        /// <summary>
        ///     Scans a string for malware.
        /// </summary>
        /// <param name="amsiContext">The handle of type HAMSICONTEXT that was initially received from AmsiInitialize.</param>
        /// <param name="s">The string to be scanned.</param>
        /// <param name="contentName">The filename, URL, unique script ID, or similar of the content being scanned.</param>
        /// <param name="session">
        ///     If multiple scan requests are to be correlated within a session, set session to the handle of
        ///     type HAMSISESSION that was initially received from AmsiOpenSession. Otherwise, set session to nullptr.
        /// </param>
        /// <param name="result">
        ///     The result of the scan. See AMSI_RESULT. An app should use AmsiResultIsMalware to determine
        ///     whether the content should be blocked.
        /// </param>
        /// <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        [DllImport("Amsi.dll", EntryPoint = "AmsiScanString", CharSet = CharSet.Unicode)]
        public static extern uint AmsiScanString(
            IntPtr amsiContext,
            [MarshalAs(UnmanagedType.LPWStr)] string s,
            [MarshalAs(UnmanagedType.LPWStr)] string contentName,
            IntPtr session,
            out AmsiResult result);

        /// <summary>
        ///     Scans a buffer-full of content for malware.
        /// </summary>
        /// <param name="amsiContext">The handle of type HAMSICONTEXT that was initially received from AmsiInitialize.</param>
        /// <param name="buffer">The buffer from which to read the data to be scanned.</param>
        /// <param name="length">The length, in bytes, of the data to be read from buffer.</param>
        /// <param name="contentName">The filename, URL, unique script ID, or similar of the content being scanned.</param>
        /// <param name="session">
        ///     If multiple scan requests are to be correlated within a session, set session to the handle of
        ///     type HAMSISESSION that was initially received from AmsiOpenSession. Otherwise, set session to nullptr.
        /// </param>
        /// <param name="result">
        ///     The result of the scan. See AMSI_RESULT. An app should use AmsiResultIsMalware to determine
        ///     whether the content should be blocked.
        /// </param>
        /// <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        [DllImport("Amsi.dll", EntryPoint = "AmsiScanBuffer", CharSet = CharSet.Unicode)]
        public static extern uint AmsiScanBuffer(
            IntPtr amsiContext,
            IntPtr buffer,
            int length,
            [MarshalAs(UnmanagedType.LPWStr)] string contentName,
            IntPtr session,
            out AmsiResult result);
    }
}